unlist
returnResults <- function(sent) {
results_df <- data.frame(pred = character(), count = integer())
for (word in min(length(sent), 4):1) {
final_sent <- paste(tail(sent, word), collapse = " ")
if (word == 4) {
results_df <- bind_rows(results_df, getResults(final_sent, pentagram_df))
} else if (word == 3) {
results_df <- bind_rows(results_df, getResults(final_sent, quadgram_df))
} else if (word == 2) {
results_df <- bind_rows(results_df, getResults(final_sent, trigram_df))
} else {
results_df <- bind_rows(results_df, getResults(final_sent, bigram_df))
}
}
as.character(results_df[1,1])
}
getResults <- function(final_sent, df) {
head(df)
results <- df %>%
filter(prev == final_sent) %>%
top_n(2, count) #%>%
#select(pred, count)
}
returnResults(clean_entry)
clean_entry <- tolower(sent) %>%
removeNumbers %>%
removePunctuation() %>%
stripWhitespace() %>%
str_trim %>%
strsplit(split = " ") %>%
unlist
returnResults <- function(sent) {
results_df <- data.frame(pred = character(), count = integer())
for (word in min(length(sent), 4):1) {
final_sent <- paste(tail(sent, word), collapse = " ")
if (word == 4) {
results_df <- bind_rows(results_df, getResults(final_sent, pentagram_df))
} else if (word == 3) {
results_df <- bind_rows(results_df, getResults(final_sent, quadgram_df))
} else if (word == 2) {
results_df <- bind_rows(results_df, getResults(final_sent, trigram_df))
} else {
results_df <- bind_rows(results_df, getResults(final_sent, bigram_df))
}
}
as.character(results_df[1,1])
}
getResults <- function(final_sent, df) {
results <- df %>%
filter(prev == final_sent) %>%
#top_n(2, count) #%>%
select(pred, count)
}
returnResults(clean_entry)
getResults <- function(final_sent, df) {
results <- df %>%
filter(prev == final_sent) %>%
top_n(2, count) %>%
select(pred, count)
}
getResults(bigram_df, clean_entry)
clean_entry
getResults(bigram_df, sent)
library(tm)
library(openNLP)
library(RWeka)
library(dplyr)
library(stringr)
library(slam)
library(data.table)
library(stringr)
getResults(bigram_df, sent)
View(bigram_df)
getResults <- function(final_sent, df) {
results <- df %>%
filter(prev == final_sent) #%>%
#         top_n(2, count) %>%
#         select(pred, count)
}
getResults(bigram_df, sent)
getResults <- function(final_sent, df) {
print(final_sent)
print(head(df))
#     results <- df %>%
#         filter(prev == final_sent) %>%
#          top_n(2, count) %>%
#          select(pred, count)
}
getResults(bigram_df, sent)
getResults <- function(final_sent, df) {
print(final_sent)
print(head(df))
#     results <- df %>%
#         filter(prev == final_sent) %>%
#          top_n(2, count) %>%
#          select(pred, count)
}
getResults(bigram_df, sent)
getResults(sent, bigram_df)
getResults <- function(final_sent, df) {
results <- df %>%
filter(prev == final_sent) #%>%
#          top_n(2, count) %>%
#          select(pred, count)
}
getResults(sent, bigram_df)
print(getResults(sent, bigram_df))
print(getResults(clean_entry, bigram_df))
getResults <- function(final_sent, df) {
results <- df %>%
filter(prev == final_sent) %>%
top_n(2, count) #%>%
#          select(pred, count)
}
print(getResults(clean_entry, bigram_df))
View(bi)
View(bigram_df)
colnames(bigram_df) <- c("phrase", "count")
colnames(trigram_df) <- c("phrase", "count")
colnames(quadgram_df) <- c("phrase", "count")
colnames(pentagram_df) <- c("phrase", "count")
print(getResults(clean_entry, bigram_df))
getResults(clean_entry, bigram_df)
getResults <- function(final_sent, df) {
results <- df %>%
filter(prev == final_sent) #%>%
#top_n(2, count) %>%
#          select(pred, count)
}
getResults(clean_entry, bigram_df)
clean_entry
getResults(sent, bigram_df)
sent
sent <- "hello"
getResults(sent, bigram_df)
getResults(sent, bigram_df)
getResults(sent, bigram_df)
View(bigram_df)
bigram_df <- as.data.frame(table(bigram))
trigram_df <- as.data.frame(table(trigram))
quadgram_df <- as.data.frame(table(quadgram))
pentagram_df <- as.data.frame(table(pentagram))
bigram_df <- bigram_df[order(bigram_df$Freq, decreasing = TRUE),]
trigram_df <- trigram_df[order(trigram_df$Freq, decreasing = TRUE),]
quadgram_df <- quadgram_df[order(quadgram_df$Freq, decreasing = TRUE),]
pentagram_df <- pentagram_df[order(pentagram_df$Freq, decreasing = TRUE),]
colnames(bigram_df) <- c("phrase", "count")
colnames(trigram_df) <- c("phrase", "count")
colnames(quadgram_df) <- c("phrase", "count")
colnames(pentagram_df) <- c("phrase", "count")
parsePhrase <- function(df) {
df <- df %>% mutate(prev = str_trim(str_match(phrase, ".*[^a-z]+")),
pred = str_trim(str_match(phrase, "[ ]+?[a-z]+$")))
}
bigram_df <<- parsePhrase(bigram_df)
trigram_df <<- parsePhrase(trigram_df)
quadgram_df <<- parsePhrase(quadgram_df)
pentagram_df <<- parsePhrase(pentagram_df)
View(bigram_df)
getResults <- function(final_sent, df) {
results <- df %>%
filter(prev == final_sent) #%>%
#top_n(2, count) %>%
#          select(pred, count)
}
getResults(sent, bigram_df)
print(getResults(sent, bigram_df))
getResults <- function(final_sent, df) {
results <- df %>%
filter(prev == final_sent) %>%
top_n(2, count) #%>%
#          select(pred, count)
}
print(getResults(sent, bigram_df))
getResults <- function(final_sent, df) {
results <- df %>%
filter(prev == final_sent) %>%
top_n(2, count) %>%
select(pred, count)
}
print(getResults(sent, bigram_df))
sent <- "hello"
clean_entry <- tolower(sent) %>%
removeNumbers %>%
removePunctuation() %>%
stripWhitespace() %>%
str_trim %>%
strsplit(split = " ") %>%
unlist
returnResults <- function(sent) {
results_df <- data.frame(pred = character(), count = integer())
for (word in min(length(sent), 4):1) {
final_sent <- paste(tail(sent, word), collapse = " ")
if (word == 4) {
results_df <- bind_rows(results_df, getResults(final_sent, pentagram_df))
} else if (word == 3) {
results_df <- bind_rows(results_df, getResults(final_sent, quadgram_df))
} else if (word == 2) {
results_df <- bind_rows(results_df, getResults(final_sent, trigram_df))
} else {
results_df <- bind_rows(results_df, getResults(final_sent, bigram_df))
}
}
as.character(results_df[1,1])
}
getResults <- function(final_sent, df) {
results <- df %>%
filter(prev == final_sent) %>%
top_n(2, count) %>%
select(pred, count)
}
print(returnResults(clean_entry))
shiny::runApp('Programming/R/NLP_Capstone/shinyApp')
View(bigram_df)
shiny::runApp('Programming/R/NLP_Capstone/shinyApp')
install.packages('RSQLite')
library(RSQLite)
setwd("/Users/brianhudnall/Programming/R/NLP_Capstone/final/shinyApp")
setwd("/Users/brianhudnall/Programming/R/NLP_Capstone/final/")
ngram_data <- dbConnect(SQLite(), dbname="shinyApp/ngram_data.db")
library(RSQLite)
ngram_data <- dbConnect(SQLite(), dbname="shinyApp/ngram_data.db")
list.files()
setwd("/Users/brianhudnall/Programming/R/NLP_Capstone/shinyApp/")
list.files()
ngram_data <- dbConnect(SQLite(), dbname="ngram_data.db")
View(bigram_df)
View(bigram_df)
View(bigram_df)
tableName <- "bigram"
paste("create table ",
tableName,
" (prev text,
pred text,
count integer)")
paste("create table",
tableName,
" (prev text,
pred text,
count integer)")
paste("create table",
tableName,
"(prev text,
pred text,
count integer)")
?paste
paste0("create table",
tableName,
"(prev text,
pred text,
count integer)")
paste("create table", tableName, "(prev text, pred text, count integer)")
createTable <- function(db, tableName) {
dbSendQuery(conn = db, paste("create table", tableName, "(prev text, pred text, count integer)"))
}
createTable(ngram_data, "bigram")
createTable(ngram_data, "trigram")
createTable(ngram_data, "quadgram")
createTable(ngram_data, "pentagram")
inspect(ni_tdm)
inspect(bi_tdm)
View(bigram_df)
View(pentagram_df)
View(trigram_df)
View(quadgram_df)
View(pentagram_df)
sqlInsert <- function(db, query, dataFrame) {
dbBegin(db)
dbGetPreparedQuery(db, query, bind.data = dataFrame)
dbCommit(db)
}
sqlInsert("ngram_data.db", bi_insert, bigram_df)
sqlInsert <- function(query, dataFrame) {
dbBegin("ngram_data.db")
dbGetPreparedQuery("ngram_data.db", query, bind.data = dataFrame)
dbCommit("ngram_data.db")
}
sqlInsert(bi_insert, bigram_df)
sqlInsert <- function(db, query, dataFrame) {
dbBegin(db)
dbGetPreparedQuery(db, query, bind.data = dataFrame)
dbCommit(db)
}
sqlInsert(ngram_data, bi_insert, bigram_df)
bi_insert <- "insert into bigram values ($prev, $pred, $count)"
tri_insert <- "insert into trigram values ($prev, $pred, $count)"
quad_insert <- "insert into quadgram values ($prev, $pred, $count)"
pent_insert <- "insert into pentagram values ($prev, $pred, $count)"
sqlInsert(ngram_data, bi_insert, bigram_df)
sqlInsert <- function(db, query, dataFrame) {
dbBegin(db)
dbGetPreparedQuery(db, query, bind.data = dataFrame)
dbCommit(db)
}
sqlInsert(ngram_data, bi_insert, bigram_df)
install.packages("RH2")
library(RH2)
sqlInsert(ngram_data, bi_insert, bigram_df)
ngram_data
bi_insert
head(bigram_df)
?"dbGetPreparedQuery"
sqlInsert <- function(db, query, dataFrame) {
print(db)
print(query)
print(head(dataFrame))
#     dbBegin(db)
#     dbGetPreparedQuery(db, query, bind.data = dataFrame)
#     dbCommit(db)
}
sqlInsert(ngram_data, bi_insert, bigram_df)
dbBegin(ngram_data)
dbGetPreparedQuery(ngram_data, bi_insert, bind.data = bigram_df)
dbCommit(ngram_data)
ngram_data <- dbConnect(SQLite(), dbname="ngram_data.db")
dbBegin(ngram_data)
dbGetPreparedQuery(ngram_data, bi_insert, bind.data = bigram_df)
dbCommit(ngram_data)
dbBegin(ngram_data)
dbGetPreparedQuery(ngram_data, bi_insert, bind.data = bigram_df)
dbCommit(ngram_data)
sqlInsert(ngram_data, bi_insert, bigram_df)
sqlInsert <- function(db, query, dataFrame) {
dbBegin(db)
dbGetPreparedQuery(db, query, bind.data = dataFrame)
dbCommit(db)
}
sqlInsert(ngram_data, bi_insert, bigram_df)
sqlInsert(ngram_data, tri_insert, trigram_df)
sqlInsert(ngram_data, quad_insert, quadgram_df)
sqlInsert(ngram_data, pent_insert, pentagram_df)
dbDisconnect(ngram_data)
View(bigram_df)
View(trigram_df)
View(quadgram_df)
View(pentagram_df)
statement <- "in"
returnResults <- function(sent, db) {
results_df <- data.frame(pred = character(), count = integer())
for (word in min(length(sent), 4):1) {
final_sent <- paste(tail(sent, word), collapse = " ")
if (word == 4) {
query <- paste("select pred, count from pentagram where ", " prev=='"
, paste(final_sent), "'", " limit 2", sep="")
send_query <- dbSendQuery(conn=db, query)
results <- dbFetch(send_query, n=-1)
print(results)
} else if (word == 3) {
results <- paste("select pred, count from quadgram where ", " prev=='"
, paste(final_sent), "'", " limit 2", sep="")
send_query <- dbSendQuery(conn=db, query)
results <- dbFetch(send_query, n=-1)
print(results)
} else if (word == 2) {
results <- paste("select pred, count from trigram where ", " prev=='"
, paste(final_sent), "'", " limit 2", sep="")
send_query <- dbSendQuery(conn=db, query)
results <- dbFetch(send_query, n=-1)
print(results)
} else {
results <- paste("select pred, count from bigram where ", " prev=='"
, paste(final_sent), "'", " limit 2", sep="")
send_query <- dbSendQuery(conn=db, query)
results <- dbFetch(send_query, n=-1)
print(results)
}
}
}
db <- dbConnect(SQLite(), dbname="ngram_data.db")
returnResults(statement, db)
statament
statement
results <- paste("select pred, count from quadgram where ", " prev=='"
, paste(statement), "'", " limit 2", sep="")
results
results <- paste("select pred, count from quadgram where ", "prev=='"
, paste(statement), "'", " limit 2", sep="")
results
send_query <- dbSendQuery(conn=db, query)
ngram_data <- dbConnect(SQLite(), dbname="ngram_data.db")
send_query <- dbSendQuery(conn=ngram_data, query)
getwd()
query
query <- paste("select pred, count from pentagram where ", "prev=='"
, paste(statement), "'", " limit 2", sep="")
query
send_query <- dbSendQuery(conn=db, query)
results <- dbFetch(send_query, n=-1)
print(results)
query <- paste("select pred, count from bigram where ", "prev=='"
, paste(statement), "'", " limit 2", sep="")
query
send_query <- dbSendQuery(conn=db, query)
results <- dbFetch(send_query, n=-1)
results
returnResults <- function(sent, db) {
results_df <- data.frame(pred = character(), count = integer())
for (word in min(length(sent), 4):1) {
final_sent <- paste(tail(sent, word), collapse = " ")
if (word == 4) {
query <- paste("select pred, count from pentagram where ", "prev=='"
, paste(final_sent), "'", " limit 2", sep="")
send_query <- dbSendQuery(conn=db, query)
results <- dbFetch(send_query, n=-1)
bind_rows(results_df, results)
} else if (word == 3) {
query <- paste("select pred, count from quadgram where ", "prev=='"
, paste(final_sent), "'", " limit 2", sep="")
send_query <- dbSendQuery(conn=db, query)
results <- dbFetch(send_query, n=-1)
bind_rows(results_df, results)
} else if (word == 2) {
query <- paste("select pred, count from trigram where ", "prev=='"
, paste(final_sent), "'", " limit 2", sep="")
send_query <- dbSendQuery(conn=db, query)
results <- dbFetch(send_query, n=-1)
bind_rows(results_df, results)
} else {
query <- paste("select pred, count from bigram where ", "prev=='"
, paste(final_sent), "'", " limit 2", sep="")
send_query <- dbSendQuery(conn=db, query)
results <- dbFetch(send_query, n=-1)
bind_rows(results_df, results)
}
}
as.character(results_df[1,1])
}
ngram_data
returnResults(statement, ngram_data)
statement
returnResults <- function(sent, db) {
results_df <- data.frame(pred = character(), count = integer())
for (word in min(length(sent), 4):1) {
final_sent <- paste(tail(sent, word), collapse = " ")
if (word == 4) {
query <- paste("select pred, count from pentagram where ", "prev=='"
, paste(final_sent), "'", " limit 2", sep="")
send_query <- dbSendQuery(conn=db, query)
results <- dbFetch(send_query, n=-1)
bind_rows(results_df, results)
} else if (word == 3) {
query <- paste("select pred, count from quadgram where ", "prev=='"
, paste(final_sent), "'", " limit 2", sep="")
send_query <- dbSendQuery(conn=db, query)
results <- dbFetch(send_query, n=-1)
bind_rows(results_df, results)
} else if (word == 2) {
query <- paste("select pred, count from trigram where ", "prev=='"
, paste(final_sent), "'", " limit 2", sep="")
send_query <- dbSendQuery(conn=db, query)
results <- dbFetch(send_query, n=-1)
bind_rows(results_df, results)
} else {
query <- paste("select pred, count from bigram where ", "prev=='"
, paste(final_sent), "'", " limit 2", sep="")
send_query <- dbSendQuery(conn=db, query)
results <- dbFetch(send_query, n=-1)
bind_rows(results_df, results)
}
}
as.character(results_df[1,1])
}
statement
returnResults(statement, ngram_data)
results_df
esults_df <- data.frame(pred = character(), count = integer())
results_df <- data.frame(pred = character(), count = integer())
results_df
query <- paste("select pred, count from bigram where ", "prev=='"
, paste(statement), "'", " limit 2", sep="")
query
send_query <- dbSendQuery(conn=db, query)
results <- dbFetch(send_query, n=-1)
bind_rows(results_df, results)
results_df
results
returnResults <- function(sent, db) {
results_df <- data.frame(pred = character(), count = integer())
for (word in min(length(sent), 4):1) {
final_sent <- paste(tail(sent, word), collapse = " ")
if (word == 4) {
query <- paste("select pred, count from pentagram where ", "prev=='"
, paste(final_sent), "'", " limit 2", sep="")
send_query <- dbSendQuery(conn=db, query)
results <- dbFetch(send_query, n=-1)
results_df <- bind_rows(results_df, results)
} else if (word == 3) {
query <- paste("select pred, count from quadgram where ", "prev=='"
, paste(final_sent), "'", " limit 2", sep="")
send_query <- dbSendQuery(conn=db, query)
results <- dbFetch(send_query, n=-1)
results_df <- bind_rows(results_df, results)
} else if (word == 2) {
query <- paste("select pred, count from trigram where ", "prev=='"
, paste(final_sent), "'", " limit 2", sep="")
send_query <- dbSendQuery(conn=db, query)
results <- dbFetch(send_query, n=-1)
results_df <- bind_rows(results_df, results)
} else {
query <- paste("select pred, count from bigram where ", "prev=='"
, paste(final_sent), "'", " limit 2", sep="")
send_query <- dbSendQuery(conn=db, query)
results <- dbFetch(send_query, n=-1)
results_df <- bind_rows(results_df, results)
}
}
as.character(results_df[1,1])
}
returnResults(statement, ngram_data)
dbDisconnect(ngram_data)
shiny::runApp()
